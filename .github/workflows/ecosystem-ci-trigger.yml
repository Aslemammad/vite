name: ecosystem-ci trigger

# on:
#   issue_comment:
#     types: [created]

on:
  pull_request:

permissions:
  issues: write
  contents: write

jobs:
  trigger:
    runs-on: ubuntu-latest
    # if: github.repository == 'vitejs/vite' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/ecosystem-ci run')
    steps:
      - uses: actions/github-script@v7
        id: get-pr-data
        with:
          script: |
            console.log(`Get PR info: ${context.repo.owner}/${context.repo.repo}#${context.issue.number}`)
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: 1
            })
            return {
              num: 1,
              branchName: pr.head.ref,
              commit: pr.head.sha,
              repo: pr.head.repo.full_name
            }
      - id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_ID }}
          installation_retrieval_payload: "${{ github.repository_owner }}/vite-ecosystem-ci"
          private_key: ${{ secrets.ECOSYSTEM_CI_GITHUB_APP_PRIVATE_KEY }}
      - uses: actions/github-script@v7
        id: check-workflow
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const user = context.payload.sender.login
            console.log(`Validate user: ${user}`)

            let hasTriagePermission = false
            try {
              const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: user,
              });
              console.log(data)
              hasTriagePermission = ['triage', 'write', 'admin'].some(p => data.user.permissions[p]);
            } catch (e) {
              console.warn(e)
            }

            const prData = ${{ steps.get-pr-data.outputs.result }}

            const url = `https://pkg.pr.new/vite@${prData.commit}`
            const response = await fetch(url)
            if (response.status === 404) {
              console.log('Package not found, triggering preview release...')

              const { data: reaction } = await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: 2449396756,
                content: 'rocket',
              })

              // Add label "trigger: preview" to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prData.num,
                labels: ['trigger: preview']
              });

              // Get the workflow ID for 'preview-release.yml'
              const workflowFileName = 'preview-release.yml';
              const { data: workflow } = await github.rest.actions.getWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFileName,
              });
              const workflowId = workflow.id;

              // Wait for 'Preview release' workflow to complete
              const maxRetries = 60; // Wait up to 10 minutes
              const delay = 10000; // 10 seconds
              let completed = false;

              for (let i = 0; i < maxRetries; i++) {
                let page = 1;
                let found = false;

                do {
                  const { data: runsData } = await github.rest.actions.listWorkflowRuns({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflowId,
                    per_page: 100,
                    page: page,
                  });

                  const runs = runsData.workflow_runs.filter(
                    run => run.head_sha === prData.commit
                  );

                  if (runs.length > 0) {
                    found = true;
                    const latestRun = runs[0];
                    if (latestRun.status === 'completed') {
                      if (latestRun.conclusion === 'success') {
                        console.log('Preview release workflow completed successfully.')
                        completed = true;
                        break;
                      } else {
                        throw new Error(`Workflow "Preview release" failed.`);
                      }
                    }
                  }

                  if (runsData.workflow_runs.length < 100) {
                    break; // No more pages
                  }
                  page++;
                } while (!found);

                if (completed) {
                  break;
                }

                // Wait
                await new Promise(resolve => setTimeout(resolve, delay));
              }

              if (!completed) {
                throw new Error(`Workflow "Preview release" did not complete in time.`);
              }

              // Remove the 'rocket' reaction
              await github.rest.reactions.deleteForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: 2449396756,
                reaction_id: reaction.id,
              });
            }

            if (hasTriagePermission) {
              console.log('Allowed')
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: 2449396756,
                content: '+1',
              })
            } else {
              console.log('Not allowed')
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: 2449396756,
                content: '-1',
              })
              throw new Error('not allowed')
            }
            
      - uses: actions/github-script@v7
        id: trigger
        env:
          COMMENT: ${{ github.event.comment.body }}
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const comment = process.env.COMMENT.trim()
            const prData = ${{ steps.get-pr-data.outputs.result }}

            const suite = comment.split('\n')[0].replace(/^\/ecosystem-ci run/, '').trim()

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'vite-ecosystem-ci',
              workflow_id: 'ecosystem-ci-from-pr.yml',
              ref: 'main',
              inputs: {
                prNumber: '' + prData.num,
                branchName: prData.branchName,
                repo: prData.repo,
                commit: prData.commit,
                suite: suite === '' ? '-' : suite
              }
            })
